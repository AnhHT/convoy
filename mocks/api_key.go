// Code generated by MockGen. DO NOT EDIT.
// Source: api_key.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	convoy "github.com/frain-dev/convoy"
	models "github.com/frain-dev/convoy/server/models"
	mongopagination "github.com/gobeam/mongo-go-pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIKeyRepo is a mock of APIKeyRepo interface.
type MockAPIKeyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepoMockRecorder
}

// MockAPIKeyRepoMockRecorder is the mock recorder for MockAPIKeyRepo.
type MockAPIKeyRepoMockRecorder struct {
	mock *MockAPIKeyRepo
}

// NewMockAPIKeyRepo creates a new mock instance.
func NewMockAPIKeyRepo(ctrl *gomock.Controller) *MockAPIKeyRepo {
	mock := &MockAPIKeyRepo{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepo) EXPECT() *MockAPIKeyRepoMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyRepo) CreateAPIKey(ctx context.Context, apiKey *convoy.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyRepoMockRecorder) CreateAPIKey(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyRepo)(nil).CreateAPIKey), ctx, apiKey)
}

// DeleteAPIKey mocks base method.
func (m *MockAPIKeyRepo) DeleteAPIKey(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockAPIKeyRepoMockRecorder) DeleteAPIKey(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockAPIKeyRepo)(nil).DeleteAPIKey), ctx, uid)
}

// FindAPIKeyByHash mocks base method.
func (m *MockAPIKeyRepo) FindAPIKeyByHash(ctx context.Context, hash string) (*convoy.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByHash", ctx, hash)
	ret0, _ := ret[0].(*convoy.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByHash indicates an expected call of FindAPIKeyByHash.
func (mr *MockAPIKeyRepoMockRecorder) FindAPIKeyByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByHash", reflect.TypeOf((*MockAPIKeyRepo)(nil).FindAPIKeyByHash), ctx, hash)
}

// FindAPIKeyByID mocks base method.
func (m *MockAPIKeyRepo) FindAPIKeyByID(ctx context.Context, uid string) (*convoy.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByID", ctx, uid)
	ret0, _ := ret[0].(*convoy.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByID indicates an expected call of FindAPIKeyByID.
func (mr *MockAPIKeyRepoMockRecorder) FindAPIKeyByID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByID", reflect.TypeOf((*MockAPIKeyRepo)(nil).FindAPIKeyByID), ctx, uid)
}

// LoadAPIKeysPaged mocks base method.
func (m *MockAPIKeyRepo) LoadAPIKeysPaged(ctx context.Context, pageable *models.Pageable) ([]convoy.APIKey, *mongopagination.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAPIKeysPaged", ctx, pageable)
	ret0, _ := ret[0].([]convoy.APIKey)
	ret1, _ := ret[1].(*mongopagination.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadAPIKeysPaged indicates an expected call of LoadAPIKeysPaged.
func (mr *MockAPIKeyRepoMockRecorder) LoadAPIKeysPaged(ctx, pageable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAPIKeysPaged", reflect.TypeOf((*MockAPIKeyRepo)(nil).LoadAPIKeysPaged), ctx, pageable)
}

// RevokeAPIKeys mocks base method.
func (m *MockAPIKeyRepo) RevokeAPIKeys(ctx context.Context, uids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAPIKeys", ctx, uids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAPIKeys indicates an expected call of RevokeAPIKeys.
func (mr *MockAPIKeyRepoMockRecorder) RevokeAPIKeys(ctx, uids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAPIKeys", reflect.TypeOf((*MockAPIKeyRepo)(nil).RevokeAPIKeys), ctx, uids)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyRepo) UpdateAPIKey(ctx context.Context, apiKey *convoy.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyRepoMockRecorder) UpdateAPIKey(ctx, apiKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyRepo)(nil).UpdateAPIKey), ctx, apiKey)
}
