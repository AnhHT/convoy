// Code generated by MockGen. DO NOT EDIT.
// Source: api_key.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	convoy "github.com/frain-dev/convoy"
	mongopagination "github.com/gobeam/mongo-go-pagination"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyRepository) CreateAPIKey(arg0 context.Context, arg1 *convoy.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) CreateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).CreateAPIKey), arg0, arg1)
}

// FindAPIKeyByHash mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByHash(arg0 context.Context, arg1 string) (*convoy.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByHash", arg0, arg1)
	ret0, _ := ret[0].(*convoy.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByHash indicates an expected call of FindAPIKeyByHash.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByHash", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByHash), arg0, arg1)
}

// FindAPIKeyByID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByID(arg0 context.Context, arg1 string) (*convoy.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByID", arg0, arg1)
	ret0, _ := ret[0].(*convoy.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByID indicates an expected call of FindAPIKeyByID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByID), arg0, arg1)
}

// FindAPIKeyByMaskID mocks base method.
func (m *MockAPIKeyRepository) FindAPIKeyByMaskID(arg0 context.Context, arg1 string) (*convoy.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKeyByMaskID", arg0, arg1)
	ret0, _ := ret[0].(*convoy.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAPIKeyByMaskID indicates an expected call of FindAPIKeyByMaskID.
func (mr *MockAPIKeyRepositoryMockRecorder) FindAPIKeyByMaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKeyByMaskID", reflect.TypeOf((*MockAPIKeyRepository)(nil).FindAPIKeyByMaskID), arg0, arg1)
}

// LoadAPIKeysPaged mocks base method.
func (m *MockAPIKeyRepository) LoadAPIKeysPaged(arg0 context.Context, arg1 *convoy.Pageable) ([]convoy.APIKey, *mongopagination.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAPIKeysPaged", arg0, arg1)
	ret0, _ := ret[0].([]convoy.APIKey)
	ret1, _ := ret[1].(*mongopagination.PaginationData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoadAPIKeysPaged indicates an expected call of LoadAPIKeysPaged.
func (mr *MockAPIKeyRepositoryMockRecorder) LoadAPIKeysPaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAPIKeysPaged", reflect.TypeOf((*MockAPIKeyRepository)(nil).LoadAPIKeysPaged), arg0, arg1)
}

// RevokeAPIKeys mocks base method.
func (m *MockAPIKeyRepository) RevokeAPIKeys(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeAPIKeys indicates an expected call of RevokeAPIKeys.
func (mr *MockAPIKeyRepositoryMockRecorder) RevokeAPIKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAPIKeys", reflect.TypeOf((*MockAPIKeyRepository)(nil).RevokeAPIKeys), arg0, arg1)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyRepository) UpdateAPIKey(arg0 context.Context, arg1 *convoy.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyRepositoryMockRecorder) UpdateAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyRepository)(nil).UpdateAPIKey), arg0, arg1)
}
